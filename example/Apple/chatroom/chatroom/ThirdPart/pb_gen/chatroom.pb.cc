// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatroom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chatroom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* EnterRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberEnter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberEnter_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chatroom_2eproto() {
  protobuf_AddDesc_chatroom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chatroom.proto");
  GOOGLE_CHECK(file != NULL);
  EnterRoomReq_descriptor_ = file->message_type(0);
  static const int EnterRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, nickname_),
  };
  EnterRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomReq_descriptor_,
      EnterRoomReq::default_instance_,
      EnterRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomReq));
  EnterRoomRsp_descriptor_ = file->message_type(1);
  static const int EnterRoomRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, id_),
  };
  EnterRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomRsp_descriptor_,
      EnterRoomRsp::default_instance_,
      EnterRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomRsp));
  MemberEnter_descriptor_ = file->message_type(2);
  static const int MemberEnter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberEnter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberEnter, nickname_),
  };
  MemberEnter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberEnter_descriptor_,
      MemberEnter::default_instance_,
      MemberEnter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberEnter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberEnter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberEnter));
  UpMessage_descriptor_ = file->message_type(3);
  static const int UpMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMessage, length_),
  };
  UpMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpMessage_descriptor_,
      UpMessage::default_instance_,
      UpMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpMessage));
  DownMessage_descriptor_ = file->message_type(4);
  static const int DownMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownMessage, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownMessage, nickname_),
  };
  DownMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownMessage_descriptor_,
      DownMessage::default_instance_,
      DownMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownMessage));
  ExitRoomReq_descriptor_ = file->message_type(5);
  static const int ExitRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, nickname_),
  };
  ExitRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitRoomReq_descriptor_,
      ExitRoomReq::default_instance_,
      ExitRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitRoomReq));
  ExitRoomRsp_descriptor_ = file->message_type(6);
  static const int ExitRoomRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomRsp, error_),
  };
  ExitRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitRoomRsp_descriptor_,
      ExitRoomRsp::default_instance_,
      ExitRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitRoomRsp));
  Message_descriptor_ = file->message_type(7);
  static const int Message_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, enterroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, enterroomrsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, memberenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, upmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, downmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, exitroomreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, exitroomrsp_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Message_MessageType_descriptor_ = Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chatroom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomReq_descriptor_, &EnterRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomRsp_descriptor_, &EnterRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberEnter_descriptor_, &MemberEnter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpMessage_descriptor_, &UpMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownMessage_descriptor_, &DownMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitRoomReq_descriptor_, &ExitRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitRoomRsp_descriptor_, &ExitRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chatroom_2eproto() {
  delete EnterRoomReq::default_instance_;
  delete EnterRoomReq_reflection_;
  delete EnterRoomRsp::default_instance_;
  delete EnterRoomRsp_reflection_;
  delete MemberEnter::default_instance_;
  delete MemberEnter_reflection_;
  delete UpMessage::default_instance_;
  delete UpMessage_reflection_;
  delete DownMessage::default_instance_;
  delete DownMessage_reflection_;
  delete ExitRoomReq::default_instance_;
  delete ExitRoomReq_reflection_;
  delete ExitRoomRsp::default_instance_;
  delete ExitRoomRsp_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_chatroom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016chatroom.proto\022\005proto\"2\n\014EnterRoomReq\022"
    "\020\n\010roomName\030\001 \001(\t\022\020\n\010nickName\030\002 \001(\t\")\n\014E"
    "nterRoomRsp\022\r\n\005error\030\001 \001(\005\022\n\n\002ID\030\002 \001(\r\"+"
    "\n\013MemberEnter\022\n\n\002ID\030\001 \001(\r\022\020\n\010nickName\030\002 "
    "\001(\t\",\n\tUpMessage\022\017\n\007message\030\001 \001(\014\022\016\n\006len"
    "gth\030\002 \001(\005\"@\n\013DownMessage\022\017\n\007message\030\001 \001("
    "\014\022\016\n\006length\030\002 \001(\005\022\020\n\010nickName\030\003 \001(\t\"1\n\013E"
    "xitRoomReq\022\020\n\010roomName\030\001 \001(\t\022\020\n\010nickName"
    "\030\002 \001(\t\"\034\n\013ExitRoomRsp\022\r\n\005error\030\001 \001(\005\"\344\003\n"
    "\007Message\022(\n\004type\030\001 \001(\0162\032.proto.Message.M"
    "essageType\022)\n\014enterRoomReq\030\002 \001(\0132\023.proto"
    ".EnterRoomReq\022)\n\014enterRoomRsp\030\003 \001(\0132\023.pr"
    "oto.EnterRoomRsp\022\'\n\013memberEnter\030\004 \001(\0132\022."
    "proto.MemberEnter\022#\n\tupMessage\030\005 \001(\0132\020.p"
    "roto.UpMessage\022\'\n\013downMessage\030\006 \001(\0132\022.pr"
    "oto.DownMessage\022\'\n\013exitRoomReq\030\007 \001(\0132\022.p"
    "roto.ExitRoomReq\022\'\n\013exitRoomRsp\030\010 \001(\0132\022."
    "proto.ExitRoomRsp\"\217\001\n\013MessageType\022\022\n\016ENT"
    "ER_ROOM_REQ\020\001\022\022\n\016ENTER_ROOM_RSP\020\002\022\020\n\014MEM"
    "BER_ENTER\020\003\022\016\n\nUP_MESSAGE\020\004\022\020\n\014DOWN_MESS"
    "AGE\020\005\022\021\n\rEXIT_ROOM_REQ\020\006\022\021\n\rEXIT_ROOM_RS"
    "P\020\007", 843);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chatroom.proto", &protobuf_RegisterTypes);
  EnterRoomReq::default_instance_ = new EnterRoomReq();
  EnterRoomRsp::default_instance_ = new EnterRoomRsp();
  MemberEnter::default_instance_ = new MemberEnter();
  UpMessage::default_instance_ = new UpMessage();
  DownMessage::default_instance_ = new DownMessage();
  ExitRoomReq::default_instance_ = new ExitRoomReq();
  ExitRoomRsp::default_instance_ = new ExitRoomRsp();
  Message::default_instance_ = new Message();
  EnterRoomReq::default_instance_->InitAsDefaultInstance();
  EnterRoomRsp::default_instance_->InitAsDefaultInstance();
  MemberEnter::default_instance_->InitAsDefaultInstance();
  UpMessage::default_instance_->InitAsDefaultInstance();
  DownMessage::default_instance_->InitAsDefaultInstance();
  ExitRoomReq::default_instance_->InitAsDefaultInstance();
  ExitRoomRsp::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chatroom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chatroom_2eproto {
  StaticDescriptorInitializer_chatroom_2eproto() {
    protobuf_AddDesc_chatroom_2eproto();
  }
} static_descriptor_initializer_chatroom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EnterRoomReq::kRoomNameFieldNumber;
const int EnterRoomReq::kNickNameFieldNumber;
#endif  // !_MSC_VER

EnterRoomReq::EnterRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EnterRoomReq)
}

void EnterRoomReq::InitAsDefaultInstance() {
}

EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:proto.EnterRoomReq)
  SharedDtor();
}

void EnterRoomReq::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void EnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomReq_descriptor_;
}

const EnterRoomReq& EnterRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

EnterRoomReq* EnterRoomReq::default_instance_ = NULL;

EnterRoomReq* EnterRoomReq::New() const {
  return new EnterRoomReq;
}

void EnterRoomReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EnterRoomReq)
  return false;
#undef DO_
}

void EnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EnterRoomReq)
  // optional string roomName = 1;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EnterRoomReq)
}

::google::protobuf::uint8* EnterRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EnterRoomReq)
  // optional string roomName = 1;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EnterRoomReq)
  return target;
}

int EnterRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roomName = 1;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {

  return true;
}

void EnterRoomReq::Swap(EnterRoomReq* other) {
  if (other != this) {
    std::swap(roomname_, other->roomname_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomReq_descriptor_;
  metadata.reflection = EnterRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomRsp::kErrorFieldNumber;
const int EnterRoomRsp::kIDFieldNumber;
#endif  // !_MSC_VER

EnterRoomRsp::EnterRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EnterRoomRsp)
}

void EnterRoomRsp::InitAsDefaultInstance() {
}

EnterRoomRsp::EnterRoomRsp(const EnterRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.EnterRoomRsp)
}

void EnterRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRsp::~EnterRoomRsp() {
  // @@protoc_insertion_point(destructor:proto.EnterRoomRsp)
  SharedDtor();
}

void EnterRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomRsp_descriptor_;
}

const EnterRoomRsp& EnterRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

EnterRoomRsp* EnterRoomRsp::default_instance_ = NULL;

EnterRoomRsp* EnterRoomRsp::New() const {
  return new EnterRoomRsp;
}

void EnterRoomRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterRoomRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(error_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EnterRoomRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional uint32 ID = 2;
      case 2: {
        if (tag == 16) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EnterRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EnterRoomRsp)
  return false;
#undef DO_
}

void EnterRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EnterRoomRsp)
  // optional int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional uint32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EnterRoomRsp)
}

::google::protobuf::uint8* EnterRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EnterRoomRsp)
  // optional int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional uint32 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EnterRoomRsp)
  return target;
}

int EnterRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional uint32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomRsp::MergeFrom(const EnterRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomRsp::CopyFrom(const EnterRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRsp::IsInitialized() const {

  return true;
}

void EnterRoomRsp::Swap(EnterRoomRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomRsp_descriptor_;
  metadata.reflection = EnterRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberEnter::kIDFieldNumber;
const int MemberEnter::kNickNameFieldNumber;
#endif  // !_MSC_VER

MemberEnter::MemberEnter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MemberEnter)
}

void MemberEnter::InitAsDefaultInstance() {
}

MemberEnter::MemberEnter(const MemberEnter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.MemberEnter)
}

void MemberEnter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberEnter::~MemberEnter() {
  // @@protoc_insertion_point(destructor:proto.MemberEnter)
  SharedDtor();
}

void MemberEnter::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void MemberEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberEnter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberEnter_descriptor_;
}

const MemberEnter& MemberEnter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

MemberEnter* MemberEnter::default_instance_ = NULL;

MemberEnter* MemberEnter::New() const {
  return new MemberEnter;
}

void MemberEnter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MemberEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MemberEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MemberEnter)
  return false;
#undef DO_
}

void MemberEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MemberEnter)
  // optional uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MemberEnter)
}

::google::protobuf::uint8* MemberEnter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MemberEnter)
  // optional uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MemberEnter)
  return target;
}

int MemberEnter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberEnter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberEnter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberEnter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberEnter::MergeFrom(const MemberEnter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberEnter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberEnter::CopyFrom(const MemberEnter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberEnter::IsInitialized() const {

  return true;
}

void MemberEnter::Swap(MemberEnter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberEnter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberEnter_descriptor_;
  metadata.reflection = MemberEnter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpMessage::kMessageFieldNumber;
const int UpMessage::kLengthFieldNumber;
#endif  // !_MSC_VER

UpMessage::UpMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UpMessage)
}

void UpMessage::InitAsDefaultInstance() {
}

UpMessage::UpMessage(const UpMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.UpMessage)
}

void UpMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpMessage::~UpMessage() {
  // @@protoc_insertion_point(destructor:proto.UpMessage)
  SharedDtor();
}

void UpMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void UpMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpMessage_descriptor_;
}

const UpMessage& UpMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

UpMessage* UpMessage::default_instance_ = NULL;

UpMessage* UpMessage::New() const {
  return new UpMessage;
}

void UpMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UpMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UpMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UpMessage)
  return false;
#undef DO_
}

void UpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UpMessage)
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.UpMessage)
}

::google::protobuf::uint8* UpMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UpMessage)
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.UpMessage)
  return target;
}

int UpMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpMessage::MergeFrom(const UpMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpMessage::CopyFrom(const UpMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpMessage::IsInitialized() const {

  return true;
}

void UpMessage::Swap(UpMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpMessage_descriptor_;
  metadata.reflection = UpMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownMessage::kMessageFieldNumber;
const int DownMessage::kLengthFieldNumber;
const int DownMessage::kNickNameFieldNumber;
#endif  // !_MSC_VER

DownMessage::DownMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DownMessage)
}

void DownMessage::InitAsDefaultInstance() {
}

DownMessage::DownMessage(const DownMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.DownMessage)
}

void DownMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownMessage::~DownMessage() {
  // @@protoc_insertion_point(destructor:proto.DownMessage)
  SharedDtor();
}

void DownMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void DownMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownMessage_descriptor_;
}

const DownMessage& DownMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

DownMessage* DownMessage::default_instance_ = NULL;

DownMessage* DownMessage::New() const {
  return new DownMessage;
}

void DownMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    length_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DownMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickName;
        break;
      }

      // optional string nickName = 3;
      case 3: {
        if (tag == 26) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DownMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DownMessage)
  return false;
#undef DO_
}

void DownMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DownMessage)
  // optional bytes message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DownMessage)
}

::google::protobuf::uint8* DownMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DownMessage)
  // optional bytes message = 1;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional string nickName = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DownMessage)
  return target;
}

int DownMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional string nickName = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownMessage::MergeFrom(const DownMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownMessage::CopyFrom(const DownMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownMessage::IsInitialized() const {

  return true;
}

void DownMessage::Swap(DownMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(length_, other->length_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownMessage_descriptor_;
  metadata.reflection = DownMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitRoomReq::kRoomNameFieldNumber;
const int ExitRoomReq::kNickNameFieldNumber;
#endif  // !_MSC_VER

ExitRoomReq::ExitRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ExitRoomReq)
}

void ExitRoomReq::InitAsDefaultInstance() {
}

ExitRoomReq::ExitRoomReq(const ExitRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ExitRoomReq)
}

void ExitRoomReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitRoomReq::~ExitRoomReq() {
  // @@protoc_insertion_point(destructor:proto.ExitRoomReq)
  SharedDtor();
}

void ExitRoomReq::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void ExitRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitRoomReq_descriptor_;
}

const ExitRoomReq& ExitRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ExitRoomReq* ExitRoomReq::default_instance_ = NULL;

ExitRoomReq* ExitRoomReq::New() const {
  return new ExitRoomReq;
}

void ExitRoomReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ExitRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roomName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (tag == 18) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ExitRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ExitRoomReq)
  return false;
#undef DO_
}

void ExitRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ExitRoomReq)
  // optional string roomName = 1;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->roomname(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ExitRoomReq)
}

::google::protobuf::uint8* ExitRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExitRoomReq)
  // optional string roomName = 1;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomname(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExitRoomReq)
  return target;
}

int ExitRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roomName = 1;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitRoomReq::MergeFrom(const ExitRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomReq::CopyFrom(const ExitRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomReq::IsInitialized() const {

  return true;
}

void ExitRoomReq::Swap(ExitRoomReq* other) {
  if (other != this) {
    std::swap(roomname_, other->roomname_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitRoomReq_descriptor_;
  metadata.reflection = ExitRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitRoomRsp::kErrorFieldNumber;
#endif  // !_MSC_VER

ExitRoomRsp::ExitRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ExitRoomRsp)
}

void ExitRoomRsp::InitAsDefaultInstance() {
}

ExitRoomRsp::ExitRoomRsp(const ExitRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ExitRoomRsp)
}

void ExitRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitRoomRsp::~ExitRoomRsp() {
  // @@protoc_insertion_point(destructor:proto.ExitRoomRsp)
  SharedDtor();
}

void ExitRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitRoomRsp_descriptor_;
}

const ExitRoomRsp& ExitRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

ExitRoomRsp* ExitRoomRsp::default_instance_ = NULL;

ExitRoomRsp* ExitRoomRsp::New() const {
  return new ExitRoomRsp;
}

void ExitRoomRsp::Clear() {
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ExitRoomRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ExitRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ExitRoomRsp)
  return false;
#undef DO_
}

void ExitRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ExitRoomRsp)
  // optional int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ExitRoomRsp)
}

::google::protobuf::uint8* ExitRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ExitRoomRsp)
  // optional int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ExitRoomRsp)
  return target;
}

int ExitRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitRoomRsp::MergeFrom(const ExitRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomRsp::CopyFrom(const ExitRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomRsp::IsInitialized() const {

  return true;
}

void ExitRoomRsp::Swap(ExitRoomRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitRoomRsp_descriptor_;
  metadata.reflection = ExitRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MessageType_descriptor_;
}
bool Message_MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Message_MessageType Message::ENTER_ROOM_REQ;
const Message_MessageType Message::ENTER_ROOM_RSP;
const Message_MessageType Message::MEMBER_ENTER;
const Message_MessageType Message::UP_MESSAGE;
const Message_MessageType Message::DOWN_MESSAGE;
const Message_MessageType Message::EXIT_ROOM_REQ;
const Message_MessageType Message::EXIT_ROOM_RSP;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Message::kTypeFieldNumber;
const int Message::kEnterRoomReqFieldNumber;
const int Message::kEnterRoomRspFieldNumber;
const int Message::kMemberEnterFieldNumber;
const int Message::kUpMessageFieldNumber;
const int Message::kDownMessageFieldNumber;
const int Message::kExitRoomReqFieldNumber;
const int Message::kExitRoomRspFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Message)
}

void Message::InitAsDefaultInstance() {
  enterroomreq_ = const_cast< ::proto::EnterRoomReq*>(&::proto::EnterRoomReq::default_instance());
  enterroomrsp_ = const_cast< ::proto::EnterRoomRsp*>(&::proto::EnterRoomRsp::default_instance());
  memberenter_ = const_cast< ::proto::MemberEnter*>(&::proto::MemberEnter::default_instance());
  upmessage_ = const_cast< ::proto::UpMessage*>(&::proto::UpMessage::default_instance());
  downmessage_ = const_cast< ::proto::DownMessage*>(&::proto::DownMessage::default_instance());
  exitroomreq_ = const_cast< ::proto::ExitRoomReq*>(&::proto::ExitRoomReq::default_instance());
  exitroomrsp_ = const_cast< ::proto::ExitRoomRsp*>(&::proto::ExitRoomRsp::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  enterroomreq_ = NULL;
  enterroomrsp_ = NULL;
  memberenter_ = NULL;
  upmessage_ = NULL;
  downmessage_ = NULL;
  exitroomreq_ = NULL;
  exitroomrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:proto.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete enterroomreq_;
    delete enterroomrsp_;
    delete memberenter_;
    delete upmessage_;
    delete downmessage_;
    delete exitroomreq_;
    delete exitroomrsp_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chatroom_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    if (has_enterroomreq()) {
      if (enterroomreq_ != NULL) enterroomreq_->::proto::EnterRoomReq::Clear();
    }
    if (has_enterroomrsp()) {
      if (enterroomrsp_ != NULL) enterroomrsp_->::proto::EnterRoomRsp::Clear();
    }
    if (has_memberenter()) {
      if (memberenter_ != NULL) memberenter_->::proto::MemberEnter::Clear();
    }
    if (has_upmessage()) {
      if (upmessage_ != NULL) upmessage_->::proto::UpMessage::Clear();
    }
    if (has_downmessage()) {
      if (downmessage_ != NULL) downmessage_->::proto::DownMessage::Clear();
    }
    if (has_exitroomreq()) {
      if (exitroomreq_ != NULL) exitroomreq_->::proto::ExitRoomReq::Clear();
    }
    if (has_exitroomrsp()) {
      if (exitroomrsp_ != NULL) exitroomrsp_->::proto::ExitRoomRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.Message.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::Message_MessageType_IsValid(value)) {
            set_type(static_cast< ::proto::Message_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enterRoomReq;
        break;
      }

      // optional .proto.EnterRoomReq enterRoomReq = 2;
      case 2: {
        if (tag == 18) {
         parse_enterRoomReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_enterRoomRsp;
        break;
      }

      // optional .proto.EnterRoomRsp enterRoomRsp = 3;
      case 3: {
        if (tag == 26) {
         parse_enterRoomRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enterroomrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memberEnter;
        break;
      }

      // optional .proto.MemberEnter memberEnter = 4;
      case 4: {
        if (tag == 34) {
         parse_memberEnter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberenter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_upMessage;
        break;
      }

      // optional .proto.UpMessage upMessage = 5;
      case 5: {
        if (tag == 42) {
         parse_upMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_downMessage;
        break;
      }

      // optional .proto.DownMessage downMessage = 6;
      case 6: {
        if (tag == 50) {
         parse_downMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_downmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exitRoomReq;
        break;
      }

      // optional .proto.ExitRoomReq exitRoomReq = 7;
      case 7: {
        if (tag == 58) {
         parse_exitRoomReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exitroomreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_exitRoomRsp;
        break;
      }

      // optional .proto.ExitRoomRsp exitRoomRsp = 8;
      case 8: {
        if (tag == 66) {
         parse_exitRoomRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exitroomrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Message)
  // optional .proto.Message.MessageType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .proto.EnterRoomReq enterRoomReq = 2;
  if (has_enterroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enterroomreq(), output);
  }

  // optional .proto.EnterRoomRsp enterRoomRsp = 3;
  if (has_enterroomrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enterroomrsp(), output);
  }

  // optional .proto.MemberEnter memberEnter = 4;
  if (has_memberenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberenter(), output);
  }

  // optional .proto.UpMessage upMessage = 5;
  if (has_upmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->upmessage(), output);
  }

  // optional .proto.DownMessage downMessage = 6;
  if (has_downmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->downmessage(), output);
  }

  // optional .proto.ExitRoomReq exitRoomReq = 7;
  if (has_exitroomreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->exitroomreq(), output);
  }

  // optional .proto.ExitRoomRsp exitRoomRsp = 8;
  if (has_exitroomrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->exitroomrsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Message)
  // optional .proto.Message.MessageType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .proto.EnterRoomReq enterRoomReq = 2;
  if (has_enterroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enterroomreq(), target);
  }

  // optional .proto.EnterRoomRsp enterRoomRsp = 3;
  if (has_enterroomrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enterroomrsp(), target);
  }

  // optional .proto.MemberEnter memberEnter = 4;
  if (has_memberenter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberenter(), target);
  }

  // optional .proto.UpMessage upMessage = 5;
  if (has_upmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->upmessage(), target);
  }

  // optional .proto.DownMessage downMessage = 6;
  if (has_downmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->downmessage(), target);
  }

  // optional .proto.ExitRoomReq exitRoomReq = 7;
  if (has_exitroomreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->exitroomreq(), target);
  }

  // optional .proto.ExitRoomRsp exitRoomRsp = 8;
  if (has_exitroomrsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->exitroomrsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.Message.MessageType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .proto.EnterRoomReq enterRoomReq = 2;
    if (has_enterroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterroomreq());
    }

    // optional .proto.EnterRoomRsp enterRoomRsp = 3;
    if (has_enterroomrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enterroomrsp());
    }

    // optional .proto.MemberEnter memberEnter = 4;
    if (has_memberenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberenter());
    }

    // optional .proto.UpMessage upMessage = 5;
    if (has_upmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upmessage());
    }

    // optional .proto.DownMessage downMessage = 6;
    if (has_downmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->downmessage());
    }

    // optional .proto.ExitRoomReq exitRoomReq = 7;
    if (has_exitroomreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exitroomreq());
    }

    // optional .proto.ExitRoomRsp exitRoomRsp = 8;
    if (has_exitroomrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exitroomrsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enterroomreq()) {
      mutable_enterroomreq()->::proto::EnterRoomReq::MergeFrom(from.enterroomreq());
    }
    if (from.has_enterroomrsp()) {
      mutable_enterroomrsp()->::proto::EnterRoomRsp::MergeFrom(from.enterroomrsp());
    }
    if (from.has_memberenter()) {
      mutable_memberenter()->::proto::MemberEnter::MergeFrom(from.memberenter());
    }
    if (from.has_upmessage()) {
      mutable_upmessage()->::proto::UpMessage::MergeFrom(from.upmessage());
    }
    if (from.has_downmessage()) {
      mutable_downmessage()->::proto::DownMessage::MergeFrom(from.downmessage());
    }
    if (from.has_exitroomreq()) {
      mutable_exitroomreq()->::proto::ExitRoomReq::MergeFrom(from.exitroomreq());
    }
    if (from.has_exitroomrsp()) {
      mutable_exitroomrsp()->::proto::ExitRoomRsp::MergeFrom(from.exitroomrsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(enterroomreq_, other->enterroomreq_);
    std::swap(enterroomrsp_, other->enterroomrsp_);
    std::swap(memberenter_, other->memberenter_);
    std::swap(upmessage_, other->upmessage_);
    std::swap(downmessage_, other->downmessage_);
    std::swap(exitroomreq_, other->exitroomreq_);
    std::swap(exitroomrsp_, other->exitroomrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
